{
    "show" : "Voir plus",
    "projects" : [
        {
            "image" : "images/projects/meshViewer.png",
            "title": "Mesh Viewer",
            "bodyText": "- Outil de visualisation 3D d'objets et de maillages supportant différents formats (.obj .off .txt).\n - Possibilité d'exporter l'objet dans ces mêmes formats.\n - Ajout de textures lorsque l’objet le prend en charge.",
            "links" : [
                {
                    "text": "GitHub",
                    "href": "https://github.com/yanisseF69/MeshViewer"
                }
            ],
            "tags" : [
                "C++",
                "Qt",
                "OpenGL"
            ]
        },
        {
            "image" : "images/projects/slicerGPT.gif",
            "title": "SlicerGPT",
            "bodyText": "- Extension 3D Slicer intégrant un chatbot local.\n - Fournit une aide contextuelle à l'aide de la scène et de la documentation officielle.",
            "links" : [
                {
                    "text": "GitHub",
                    "href": "https://github.com/yanisseF69/SlicerSlicerGPT"
                }
            ],
            "tags" : [
                "Python",
                "IA",
                "Pytorch",
                "Transformers",
                "Ollama"
            ]
        },
        {
            "image" : "images/projects/diaphragm.gif",
            "title": "Recherche en imagerie médicale - Suite",
            "bodyText": "- Reconstruction 3D d'organes.",
            "tags" : [
                "Python",
                "IA",
                "Pytorch",
                "MONAI"
            ]
        },
        {
            "image" : "images/projects/diaphragm.png",
            "title": "Recherche en imagerie médicale",
            "bodyText": "- Segmentation automatique du diaphragme.\n - Apprentissage profond avec utilisation de la technique du **Transfer Learning**.\n",
            "links": [
                {
                    "text": "Rapport",
                    "href": "/Rapport_MIF11.pdf"
                }
            ],
            "tags" : [
                "Python",
                "IA",
                "Tensorflow",
                "Keras"
            ]
        },
        {
            "image" : "images/projects/delaunay.png",
            "title": "Traitement de maillages",
            "bodyText": "- Opérateurs sur des maillages (division de triangle, échange d'arrêtes...).\n - Construction de maillage à partir de nuage de points.\n - Implémentation de l'algorithme de Lawsons pour obtenir un maillage \"de Delaunay\".",
            "tags" : [
                "C++",
                "Maillages",
                "Delaunay"
            ]
        },
        {
            "image" : "images/projects/robots.jpg",
            "title": "Robots LEGO récupérant des balles",
            "bodyText": "- Programmé en C++ à l'aide de la librairie EV3Dev.\n - Usage de OpenCV pour le traitement d'images.\n - Fusion de 4 caméras pour obtenir une vue du dessus.",
            "links": [
                {
                    "text": "Rapport",
                    "href": "/Rapport_Idefix.pdf"
                }
            ],
            "tags" : [
                "C++",
                "EV3Dev",
                "OpenCV",
                "Robotique"
            ]
        },
        {
            "image" : "images/projects/imMedMouv.png",
            "title": "Imagerie médicale et suivi de mouvement",
            "bodyText": "- Manipulation de différentes modalités pour l'acquisition d'images médicales (IRM, Rayons X, Ultrasons).\n- Segmentation de poumons, conversion de la surface en maillage tétraédrique + création de la matrice de transformation T00 <-> T50 avec 3D Slicer.\n- Utilisation d'un algorithme de rétroprojection filtrée sur des scanners 2D pour réaliser une reconstruction 3D.",
            "links": [
                {
                    "text": "Rapport Partie Segmentation",
                    "href": "/Rapport_Segmentation.pdf"
                },
                {
                    "text": "Rapport Partie IRM",
                    "href": "/Rapport_IRM.pdf"
                },
                {
                    "text": "Rapport Partie Rayons X",
                    "href": "/Rapport_RX.pdf"
                },
                {
                    "text": "Rapport Partie Ultrasons",
                    "href": "/Rapport_Ultrasons.pdf"
                }
            ],
            "tags" : [
                "Imagerie médicale",
                "Python",
                "3D Slicer",
                "Segmentation",
                "IRM",
                "Rayons X",
                "Ultrasons"
            ]
        },
        {
            "image" : "images/projects/drawing.png",
            "title": "Site de prédictions de dessins",
            "bodyText": "- Découverte du deep learning pour la classification d'images.\n - Usage de Tensorflow pour la construction de l'architecture et de l'entraînement.\n - Affichage du pourcentage de prédiction du TOP 3.",
            "links": [
                {
                    "text": "GitHub",
                    "href": "https://github.com/yanisseF69/Projet_info_2023"
                }
            ],
            "tags" : [
                "Python",
                "Deep learning",
                "IA",
                "Tensorflow",
                "Keras",
                "OpenCV"
            ]
        },
        {
            "image" : "images/projects/monteCarlo.png",
            "title": "Rendu 3D",
            "bodyText": "- Réalisé en C++.\n- Utilisation du lancer de rayons.\n- Implémentation de l'estimateur de Monte Carlo.",
            "tags" : [
                "C++",
                "Rendu 3D",
                "Monte Carlo",
                "Lancer de rayons"
            ]
        },
        {
            "image" : "images/projects/cubeWorld.png",
            "title": "Génération de terrain rempli de cubes",
            "bodyText": "- Utilisation de C++ et de l'API 3D OpenGL.\n- Couleur du cube varie selon la hauteur. ",
            "tags" : [
                "C++",
                "OpenGL",
                "Rendu 3D"
            ]
        },
        {
            "image" : "images/projects/genCNN.png",
            "title": "Deep learning pour de la Génération d'images",
            "bodyText": "- En python avec utilisation de Pytorch.\n - Reproduction d'images basée sur une vidéo de danse.",
            "links": [
                {
                    "text": "GitHub",
                    "href": "https://github.com/yanisseF69/ATIV-TP-Dance"
                }
            ],
            "tags" : [
                "Python",
                "Deep learning",
                "IA",
                "Pytorch",
                "Pillow",
                "OpenCV"
            ]
        },
        {
            "image": "images/projects/signal.png",
            "title": "Traitement du signal pour l'image",
            "bodyText": "- Réalisé avec Matlab.\n- Utilisation de la transformée de Fourier pour le traitement d'images.",
            "tags": [
                "Matlab",
                "Signal",
                "Fourier"
            ]
        },
        {
            "image": "images/projects/tpCV.png",
            "title": "Analyse d'images",
            "bodyText": "- Utilisation de Python, C++ et de la librairie OpenCV.\n- Partie 1 : Détections de contours en utilisant des filtres de convolutions.\n- 2e Partie : Implémentation de l'algorithme de la transformée de Hough pour détecter des lignes et des cercles.",
            "links": [
                {
                    "text": "GitHub",
                    "href": "https://github.com/yanisseF69/mif17-analyse-d_images"
                }
            ],
            "tags": [
                "C++",
                "Python",
                "OpenCV",
                "Vision par ordinateur",
                "Hough"
            ]
        },   
        {
            "image" : "images/projects/laplacian.png",
            "title": "Opérateur de Laplace sur un maillage",
            "bodyText": "- Module en C++ permettant de charger un maillage sous format .off.\n - Implémentation de l'opérateur de Laplace pour calculer la courbure.",
            "links": [
                {
                    "text": "Rapport",
                    "href": "/Rapport_GAM.pdf"
                }
            ],
            "tags" : [
                "C++",
                "Maillages",
                "Géométrie",
                "Laplacien"
            ]
        },
        {
            "image" : "images/projects/surfaces.png",
            "title": "Courbes, surfaces de révolution et surfaces implicites",
            "bodyText": "- 1e partie sur les courbes de Bézier et Hermite Cubique Spline.\n- 2e partie : codage de primitives, d'opérations et de transformations. Et réalisation de formes complexes.",
            "links": [
                {
                    "text": "GitHub",
                    "href": "https://github.com/yanisseF69/Modelisation-geometrique/"
                },
                {
                    "text": "Rapport Partie 1",
                    "href": "/Rapport_MG_1.pdf"
                },
                {
                    "text": "Rapport Partie 2",
                    "href": "Rapport_MG_2.pdf"
                }
            ],
            "tags" : [
                "C++",
                "Qt",
                "Modélisation Géométrique",
                "Courbes",
                "Surfaces implicites"
            ]
        },
        {
            "image": "images/projects/fightClub.png",
            "title": "Jeu de combat au tour-par-tour",
            "bodyText": "- Premier projet de conception et de développement de jeu.\n- Codé en C++ avec la librairie SDL2 et JsonCpp.",
            "tags": [
                "C++",
                "SDL2",
                "JsonCpp",
                "Jeu"
            ]
        },
        {
            "image" : "images/projects/voronoi.png",
            "title": "Génération de diagrammes de Voronoï",
            "bodyText": "- Introduction aux Graphes.\n- Implémentation de l'algorithme des plus courts chemins (Dijkstra).",
            "links": [
                {
                    "text": "GitHub",
                    "href": "https://github.com/yanisseF69/LIFAPC_Graphe"
                }
            ],
            "tags" : [
                "C++",
                "Dijkstra"
            ]
        }
    ]
}