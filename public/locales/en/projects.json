{
    "show" : "Show more",
    "projects" : [
        {
            "image" : "images/projects/diaphragm.gif",
            "title": "Research in medical images",
            "bodyText": "- Automatic segmentation of the diaphragm.\n - Deep learning and usage of **Transfer Learning**.\n - 3D organ reconstruction.",
            "links": [
                {
                    "text": "Report (French)",
                    "href": "https://drive.google.com/file/d/1pRMe1pMKN1II_Qx0jTUSkzBPcg-o3TOc/view?usp=sharing"
                }
            ],
            "tags" : [
                "Python",
                "IA",
                "Tensorflow",
                "Keras"
            ]
        },
        {
            "image" : "images/projects/robots.jpg",
            "title": "LEGO ball retrieval robots",
            "bodyText": "- Made in C++ with EV3Dev library.\n - Usage of OpenCV for image process.\n - Merge 4 cameras to obtain a top view.",
            "links": [
                {
                    "text": "Rapport",
                    "href": "https://drive.google.com/file/d/18F66mEsn_PUwOeHiapZw20r92D4pxEnA/view?usp=sharing"
                }
            ],
            "tags" : [
                "C++",
                "EV3Dev",
                "OpenCV",
                "Robotics"
            ]
        },
        {
            "image" : "images/projects/drawing.png",
            "title": "Drawing predictions website",
            "bodyText": "- Discovering of deep learning for image classification.\n - Using Tensorflow for building architecture and training.\n - Display of TOP 3 prediction percentage.",
            "links": [
                {
                    "text": "GitHub",
                    "href": "https://github.com/yanisseF69/Projet_info_2023"
                }
            ],
            "tags" : [
                "Python",
                "Deep learning",
                "AI",
                "Tensorflow",
                "Keras",
                "OpenCV"
            ]
        },
        {
            "image" : "images/projects/voronoi.png",
            "title": "Vorono√Ø diagram generation",
            "bodyText": "- Introduction to Graphs.\n- Implementing the shortest path algorithm (Dijkstra).",
            "links": [
                {
                    "text": "GitHub",
                    "href": "https://github.com/yanisseF69/LIFAPC_Graphe"
                }
            ],
            "tags" : [
                "C++",
                "Dijkstra"
            ]
        }
    ]
}